import { supabase } from './supabaseClient';

export interface Video {
  id: string;
  searchTerm: string;
  learningGoal: string;
  title: string;
  url: string;
  summary: string;
  level: string;
  channel: string;
  thumbnail: string;
  created_at: string;
}

export interface Quiz {
  video_id: string;
  searchTerm: string;
  learningGoal: string;
  title: string;
  url: string;
  level: string;
  difficulty: string;
  question: string;
  answer: string;
  created_at: string;
}

export interface RequestedTopic {
  id: string;
  searchTerm: string;
  learningGoal: string;
  created_at: string;
}

/**
 * Fetch videos from Supabase filtered by search term and learning goal
 */
export async function getVideos(searchTerm: string, learningGoal: string): Promise<Video[]> {
  try {
    const { data, error } = await supabase
      .from('videos')
      .select('*')
      .eq('searchTerm', searchTerm.toLowerCase())
      .eq('learningGoal', learningGoal.toLowerCase())
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase error fetching videos:', error);
      
      // Check for schema mismatch errors
      if (error.message?.includes('column') && error.message?.includes('does not exist')) {
        throw new Error('Supabase query failed. Check that column names match the schema (searchTerm, learningGoal).');
      }
      
      throw new Error(`Failed to fetch videos: ${error.message}`);
    }

    return data || [];
  } catch (error: any) {
    console.error('Error in getVideos:', error);
    throw error;
  }
}

/**
 * Fetch quizzes from Supabase filtered by search term and learning goal
 */
export async function getQuizzes(searchTerm: string, learningGoal: string): Promise<Quiz[]> {
  try {
    const { data, error } = await supabase
      .from('quizzes')
      .select('*')
      .eq('searchTerm', searchTerm.toLowerCase())
      .eq('learningGoal', learningGoal.toLowerCase())
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase error fetching quizzes:', error);
      
      // Check for schema mismatch errors
      if (error.message?.includes('column') && error.message?.includes('does not exist')) {
        throw new Error('Supabase query failed. Check that column names match the schema (searchTerm, learningGoal).');
      }
      
      throw new Error(`Failed to fetch quizzes: ${error.message}`);
    }

    return data || [];
  } catch (error: any) {
    console.error('Error in getQuizzes:', error);
    throw error;
  }
}

/**
 * Request a new topic to be generated by adding it to requested_topics table
 */
export async function requestTopic(searchTerm: string, learningGoal: string): Promise<void> {
  const { error } = await supabase
    .from('requested_topics')
    .insert({
      searchTerm: searchTerm.toLowerCase(),
      learningGoal: learningGoal.toLowerCase()
    });

  if (error) {
    console.error('Error requesting topic:', error);
    throw new Error(`Failed to request topic: ${error.message}`);
  }
}

/**
 * Check if a topic has already been requested
 */
export async function isTopicRequested(searchTerm: string, learningGoal: string): Promise<boolean> {
  const { data, error } = await supabase
    .from('requested_topics')
    .select('id')
    .eq('searchTerm', searchTerm.toLowerCase())
    .eq('learningGoal', learningGoal.toLowerCase())
    .limit(1);

  if (error) {
    console.error('Error checking requested topic:', error);
    return false;
  }

  return (data?.length || 0) > 0;
}

/**
 * Get all requested topics (for GitHub Actions processing)
 */
export async function getRequestedTopics(): Promise<RequestedTopic[]> {
  const { data, error } = await supabase
    .from('requested_topics')
    .select('*')
    .order('created_at', { ascending: true });

  if (error) {
    console.error('Error fetching requested topics:', error);
    throw new Error(`Failed to fetch requested topics: ${error.message}`);
  }

  return data || [];
}

/**
 * Remove processed topics from requested_topics table
 */
export async function removeRequestedTopic(id: string): Promise<void> {
  const { error } = await supabase
    .from('requested_topics')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('Error removing requested topic:', error);
    throw new Error(`Failed to remove requested topic: ${error.message}`);
  }
}

/**
 * Mark video as completed in user_progress table
 */
export async function markVideoCompleted(userId: string, videoUrl: string): Promise<void> {
  try {
    const { error } = await supabase
      .from('user_progress')
      .upsert({
        user_id: userId,
        video_url: videoUrl,
        completed: true,
        completed_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,video_url'
      });

    if (error) {
      console.error('Supabase error marking video as completed:', error);
      throw new Error(`Failed to mark video as completed: ${error.message}`);
    }
  } catch (error: any) {
    console.error('Error in markVideoCompleted:', error);
    throw error;
  }
}

/**
 * Get quizzes for a specific video by URL, search term, and learning goal
 */
export async function getQuizzesByVideo(videoUrl: string, searchTerm?: string, learningGoal?: string): Promise<Quiz[]> {
  try {
    let query = supabase
      .from('quizzes')
      .select('*')
      .eq('url', videoUrl)
      .limit(6);

    if (searchTerm) {
      query = query.eq('searchTerm', searchTerm.toLowerCase());
    }

    if (learningGoal) {
      query = query.eq('learningGoal', learningGoal.toLowerCase());
    }

    const { data, error } = await query.order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase error fetching quizzes by video:', error);
      
      // Check for schema mismatch errors
      if (error.message?.includes('column') && error.message?.includes('does not exist')) {
        throw new Error('Supabase query failed. Check that column names match the schema (searchTerm, learningGoal).');
      }
      
      throw new Error(`Failed to fetch quizzes: ${error.message}`);
    }

    return data || [];
  } catch (error: any) {
    console.error('Error in getQuizzesByVideo:', error);
    throw error;
  }
}

/**
 * Check if a video is completed by the user
 */
export async function isVideoCompleted(userId: string, videoUrl: string): Promise<boolean> {
  try {
    const { data, error } = await supabase
      .from('user_progress')
      .select('completed')
      .eq('user_id', userId)
      .eq('video_url', videoUrl)
      .eq('completed', true)
      .limit(1);

    if (error) {
      console.error('Supabase error checking video completion:', error);
      return false;
    }

    return (data?.length || 0) > 0;
  } catch (error: any) {
    console.error('Error in isVideoCompleted:', error);
    return false;
  }
}
