import { supabase } from './supabaseClient';

export interface Video {
  id: string;
  search_term: string;
  learning_goal: string;
  title: string;
  url: string;
  summary: string;
  level: string;
  channel: string;
  thumbnail: string;
  created_at: string;
}

export interface Quiz {
  video_id: string;
  search_term: string;
  learning_goal: string;
  title: string;
  url: string;
  level: string;
  difficulty: string;
  question: string;
  answer: string;
  created_at: string;
}

export interface RequestedTopic {
  id: string;
  searchTerm: string;
  learningGoal: string;
  created_at: string;
}

/**
 * Fetch videos from Supabase filtered by search term and learning goal
 */
export async function getVideos(searchTerm: string, learningGoal: string): Promise<Video[]> {
  const { data, error } = await supabase
    .from('videos')
    .select('*')
    .eq('search_term', searchTerm.toLowerCase())
    .eq('learning_goal', learningGoal.toLowerCase())
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching videos:', error);
    throw new Error(`Failed to fetch videos: ${error.message}`);
  }

  return data || [];
}

/**
 * Fetch quizzes from Supabase filtered by search term and learning goal
 */
export async function getQuizzes(searchTerm: string, learningGoal: string): Promise<Quiz[]> {
  const { data, error } = await supabase
    .from('quizzes')
    .select('*')
    .eq('search_term', searchTerm.toLowerCase())
    .eq('learning_goal', learningGoal.toLowerCase())
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching quizzes:', error);
    throw new Error(`Failed to fetch quizzes: ${error.message}`);
  }

  return data || [];
}

/**
 * Request a new topic to be generated by adding it to requested_topics table
 */
export async function requestTopic(searchTerm: string, learningGoal: string): Promise<void> {
  const { error } = await supabase
    .from('requested_topics')
    .insert({
      searchTerm: searchTerm.toLowerCase(),
      learningGoal: learningGoal.toLowerCase()
    });

  if (error) {
    console.error('Error requesting topic:', error);
    throw new Error(`Failed to request topic: ${error.message}`);
  }
}

/**
 * Check if a topic has already been requested
 */
export async function isTopicRequested(searchTerm: string, learningGoal: string): Promise<boolean> {
  const { data, error } = await supabase
    .from('requested_topics')
    .select('id')
    .eq('searchTerm', searchTerm.toLowerCase())
    .eq('learningGoal', learningGoal.toLowerCase())
    .limit(1);

  if (error) {
    console.error('Error checking requested topic:', error);
    return false;
  }

  return (data?.length || 0) > 0;
}

/**
 * Get all requested topics (for GitHub Actions processing)
 */
export async function getRequestedTopics(): Promise<RequestedTopic[]> {
  const { data, error } = await supabase
    .from('requested_topics')
    .select('*')
    .order('created_at', { ascending: true });

  if (error) {
    console.error('Error fetching requested topics:', error);
    throw new Error(`Failed to fetch requested topics: ${error.message}`);
  }

  return data || [];
}

/**
 * Remove processed topics from requested_topics table
 */
export async function removeRequestedTopic(id: string): Promise<void> {
  const { error } = await supabase
    .from('requested_topics')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('Error removing requested topic:', error);
    throw new Error(`Failed to remove requested topic: ${error.message}`);
  }
}
